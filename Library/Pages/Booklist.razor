@page "/booklist"  // Definiert die URL-Routing-Adresse für diese Seite
@using Library.Data  // Importiert den Namespace, der Zugriff auf Datenstrukturen wie Book erlaubt
@inject AuthService AuthService  // Blazor-DI: Zugriff auf Authentifizierungsinformationen
@inject UserBookListRepository UserBookListRepository  // Blazor-DI: Zugriff auf benutzerspezifische Buchlisten

<PageTitle>Your Book List</PageTitle>  // Setzt den Seitentitel im Browser-Tab

<!-- Wenn der Benutzer nicht eingeloggt ist, wird ein Hinweis angezeigt -->
@if (!AuthService.IsAuthenticated)
{
    <p>Please <a href="/login">log in</a> to see your book list.</p>
}
else
{
    <!-- Benutzer ist eingeloggt: Anzeige seiner Bücherliste -->
    <h1>Your Book List, @AuthService.LoggedInUser.Name</h1>

    <!-- Ladeanzeige, falls Liste noch geladen wird -->
    @if (books == null)
    {
        <p>Loading your books...</p>
    }
    <!-- Hinweis, wenn die Liste leer ist -->
    else if (books.Count == 0)
    {
        <p>Your list is empty.</p>
    }
    else
    {
        <!-- Darstellung der Buchkarten im Grid-Layout -->
        <div class="book-grid">
            @foreach (var book in books)
            {
                <div class="book-card" @onclick="() => ShowBookDetails(book)">
                    <div class="book-image-placeholder">
                        Bild kommt hier hin
                    </div>
                    <div class="book-title-container">
                        <div class="book-title">@book.Title</div>
                    </div>
                </div>
            }
        </div>
    }
}

<!-- Modal-Fenster zur Anzeige von Buchdetails -->
@if (showDetails && selectedBook != null)
{
    <div class="modal-overlay" @onclick="CloseDetails">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="close-btn" @onclick="CloseDetails">×</button>

            <h2>@selectedBook.Title</h2>
            <p><strong>Autor:</strong> @selectedBook.Author</p>
            <p><strong>Zusammenfassung:</strong> @selectedBook.Summary</p>
            <p><strong>Rückgabedatum:</strong> @(selectedBook.GiveBackDate?.ToString("dd.MM.yyyy") ?? "Keine Angabe")</p>

            <!-- Entfernt das Buch aus der Liste -->
           <div >
            <button 
                class="remove-btn"
                style="background-color: #e0e0e0; color: #333; border: none; border-radius: 6px; padding: 6px 12px; cursor: pointer; box-shadow: 0 2px 4px rgba(0,0,0,0.06); transition: background 0.2s; font-size: 1em;"
                @onclick="() => RemoveFromList(selectedBook.BookId)">
                Remove from List
            </button>
        </div>

        </div>
    </div>
}

@code {
    // Liste der Bücher, die dem aktuellen Benutzer zugeordnet sind
    private List<Book> books;

    // Steuerung des Detailmodals
    private bool showDetails = false;
    private Book selectedBook;

    // Wird beim Initialisieren der Komponente aufgerufen
    protected override void OnInitialized()
    {
        // Wenn der Benutzer eingeloggt ist, wird dessen Bücherliste geladen
        if (AuthService.IsAuthenticated)
        {
            books = UserBookListRepository.GetUserBookList(AuthService.LoggedInUser.Id);
        }
    }

    // Öffnet das Modal mit Buchdetails
    private void ShowBookDetails(Book book)
    {
        selectedBook = book;
        showDetails = true;
    }

    // Schließt das Modal
    private void CloseDetails()
    {
        showDetails = false;
        selectedBook = null;
    }

    // Entfernt das Buch aus der Liste und lädt die Liste neu
    private void RemoveFromList(int bookId)
    {
        UserBookListRepository.RemoveBookFromUserList(AuthService.LoggedInUser.Id, bookId);
        books = UserBookListRepository.GetUserBookList(AuthService.LoggedInUser.Id);  // Liste neu laden
        StateHasChanged();  // UI-Aktualisierung erzwingen
    }
}
