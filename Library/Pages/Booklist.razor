@page "/booklist"
@using Library.Data
@inject AuthService AuthService
@inject UserBookListRepository UserBookListRepository

<PageTitle>Your Book List</PageTitle>

@if (!AuthService.IsAuthenticated)
{
    <p>Please <a href="/login">log in</a> to see your book list.</p>
}
else
{
    <h1>Your Book List, @AuthService.LoggedInUser.Name</h1>

    @if (books == null)
    {
        <p>Loading your books...</p>
    }
    else if (books.Count == 0)
    {
        <p>Your list is empty.</p>
    }
    else
    {
        <div class="book-grid">
            @foreach (var book in books)
            {
                <div class="book-card">
    <div class="book-image-placeholder">
        Bild kommt hier hin
    </div>
    <div class="book-title-container">
        <div class="book-title">@book.Title</div>
    </div>

    <div class="book-author"><strong>Autor:</strong> @book.Author</div>
    <div class="book-genre"><strong>Genre:</strong> @book.Genre</div>
    <div class="book-summary">@book.Summary</div>
    <button class="remove-btn" @onclick="() => RemoveFromList(book.BookId)">Remove</button>
</div>

            }
        </div>
    }
}

@code {
    private List<Book> books;

    protected override void OnInitialized()
    {
        if (AuthService.IsAuthenticated)
        {
            books = UserBookListRepository.GetUserBookList(AuthService.LoggedInUser.Id);
        }
    }

    private void RemoveFromList(int bookId)
    {
        UserBookListRepository.RemoveBookFromUserList(AuthService.LoggedInUser.Id, bookId);
        books = UserBookListRepository.GetUserBookList(AuthService.LoggedInUser.Id);
        StateHasChanged();
    }
}
