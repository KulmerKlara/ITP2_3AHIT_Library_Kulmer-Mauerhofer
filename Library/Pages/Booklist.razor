@page "/booklist" // Defines the URL routing address for this page
@using Library.Data // Imports the namespace that provides access to data structures like Book
@inject AuthService AuthService // Blazor DI: Access to authentication information
@inject UserBookListRepository UserBookListRepository // Blazor DI: Access to user-specific book lists
@inject BookRepository BookRepository // Blazor DI: Access to the book database

<PageTitle>Your Book List</PageTitle> // Sets the page title in the browser tab

<!-- If the user is not logged in, a notice is displayed -->
@if (!AuthService.IsAuthenticated)
{
    <p>Please <a href="/login">log in</a> to see your book list.</p>
}
else
{
    <!-- User is logged in: show their book list -->
    <h1>Your Book List, @AuthService.LoggedInUser.Name</h1>

    <!-- Loading indicator if the list is still loading -->
    @if (books == null)
    {
        <p>Loading your books...</p>
    }
    <!-- Notice if the list is empty -->
    else if (books.Count == 0)
    {
        <p>Your list is empty.</p>
    }
    else
    {
        <!-- Display book cards in a grid layout -->
        <div class="book-grid">
            @foreach (var book in books)
            {
                // Check if the return date is in 2 days or less
                bool isExpiringSoon = book.GiveBackDate.HasValue && 
                                      (book.GiveBackDate.Value.Date - DateTime.Today).TotalDays <= 2 &&
                                      (book.GiveBackDate.Value.Date - DateTime.Today).TotalDays >= 0;

                if (isExpiringSoon)
                {
                    <div class="book-card-purple" @onclick="() => ShowBookDetails(book)">
                        <div class="book-image-placeholder-purple">
                            Image goes here
                        </div>
                        <div class="book-title-container">
                            <div class="book-title">@book.Title</div>
                        </div>
                    </div>
                }
                else if (book.IsAvailable == true)
                {
                    <div class="book-card-green" @onclick="() => ShowBookDetails(book)">
                        <div class="book-image-placeholder-green">
                            Image goes here
                        </div>
                        <div class="book-title-container">
                            <div class="book-title">@book.Title</div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="book-card" @onclick="() => ShowBookDetails(book)">
                        <div class="book-image-placeholder">
                            Image goes here
                        </div>
                        <div class="book-title-container">
                            <div class="book-title">@book.Title</div>
                        </div>
                    </div>
                }
            }
        </div>
    }
}

<!-- Modal window to display book details -->
@if (showDetails && selectedBook != null)
{
    <div class="modal-overlay" @onclick="CloseDetails">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="close-btn" @onclick="CloseDetails">×</button>

            <h2>@selectedBook.Title</h2>
            <p><strong>Author:</strong> @selectedBook.Author</p>
            <p><strong>Summary:</strong> @selectedBook.Summary</p>
            <p><strong>Return date:</strong> @(selectedBook.GiveBackDate?.ToString("dd.MM.yyyy") ?? "No information")</p>

            <!-- Remove the book from the list -->
           <div >
            <button 
                class="remove-btn"
                style="background-color: #e0e0e0; color: #333; border: none; border-radius: 6px; padding: 6px 12px; cursor: pointer; box-shadow: 0 2px 4px rgba(0,0,0,0.06); transition: background 0.2s; font-size: 1em;"
                @onclick="() => RemoveFromList(selectedBook.BookId)">
                Remove from List
            </button>

            More actions
            <!-- Extend return date -->
            <div style="margin-top: 1rem;">
                <label for="extendDays">Extend by:</label>
                <select id="extendDays" @bind="extendDays">
                    @for (int i = 1; i <= 4; i++)
                    {
                        <option value="@i">@i day(s)</option>
                    }
                </select>

                <button 
                    class="extend-btn"
                    style="margin-left: 10px; background-color: #d0f0c0; color: #333; border: none; border-radius: 6px; padding: 6px 12px; cursor: pointer; box-shadow: 0 2px 4px rgba(0,0,0,0.06); transition: background 0.2s; font-size: 1em;"
                    @onclick="ExtendGiveBackDate">
                </button>
            </div>
        </div>

        </div>
    </div>
}

@code {
    // List of books assigned to the current user
    private List<Book> books;

    // Controls the detail modal
    private bool showDetails = false;
    private Book selectedBook;

    // Called when the component is initialized
    protected override void OnInitialized()
    {
        // If the user is logged in, load their book list
        if (AuthService.IsAuthenticated)
        {
            books = UserBookListRepository.GetUserBookList(AuthService.LoggedInUser.Id);
        }
    }

    // Opens the modal with book details
    private void ShowBookDetails(Book book)
    {
        selectedBook = book;
        showDetails = true;
    }

    // Closes the modal
    private void CloseDetails()
    {
        showDetails = false;
        selectedBook = null;
    }

    // Removes the book from the list and reloads the list
    private void RemoveFromList(int bookId)
    {
        UserBookListRepository.RemoveBookFromUserList(AuthService.LoggedInUser.Id, bookId);
        books = UserBookListRepository.GetUserBookList(AuthService.LoggedInUser.Id);  // Reload list
        StateHasChanged();  // Force UI update
    }

    private int extendDays = 1; // Default to 1 day

    private bool showExtendOptions = false; // Controls the display of extension options
    // Method to extend the return date
    private void ExtendGiveBackDate()
    {
        if (selectedBook != null)
        {
            try
            {
                UserBookListRepository.ExtendGiveBackDate(AuthService.LoggedInUser.Id, selectedBook.BookId, extendDays);

                // Update list and selected book
                books = UserBookListRepository.GetUserBookList(AuthService.LoggedInUser.Id);
                selectedBook = books.FirstOrDefault(b => b.BookId == selectedBook.BookId);

                StateHasChanged();  // UI update
            }
            catch (Exception ex)
            {
                // Error handling (optional)
                Console.WriteLine("Error while extending: " + ex.Message);
            }
        }
    }

}
