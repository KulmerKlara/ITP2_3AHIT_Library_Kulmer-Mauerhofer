@page "/login"
@using Library.Data
@inject UserRepository UserRepository
@inject AuthService AuthService

<link href="css/login.css" rel="stylesheet" />

<!-- 
    Login.razor
    - Implements a split-screen login/sign-up page.
    - Left side: Sign In form (blue background), right side: Sign Up form (blue background when active).
    - Uses local state to toggle between forms.
    - Handles user registration and authentication using injected repositories/services.
-->

<div style="display: flex; height: 100vh;">

    <!-- Left: Sign In -->
    <div style="flex: 1; background-color: @(showSignUp ? "white" : "#ADD8E6"); display: flex; align-items: center; justify-content: center;">
        @if (!showSignUp)
        {
            <div style="background-color: rgb(255, 255, 255); padding: 30px; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.08);">
                <div class="form-block login">
                    <h1>Sign in</h1>
                    @* Show error if login fails *@
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p style="color: red">@errorMessage</p>
                    }
                    <div>
                        <input type="text" placeholder="Username or Email" @bind="signUpName" />
                    </div>
                    <br />
                    <div>
                        <input type="password" placeholder="Password" @bind="signUpPassword" required />
                    </div>
                    <br />
                    <button @onclick="SignIn">Sign In</button>
                    @* Show success and navigation if login succeeds *@
                    @if (signInSuccess)
                    {
                        <p style="color: green">Welcome @signUpName!</p>
                        <button @onclick="GoToBooklist">Go to your book list</button>
                    }

                    <div style="margin-top: 10px;"></div>
                        <button @onclick="ToggleSignUp">Sign Up</button>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Right: Sign Up -->
    <div style="flex: 1; background-color: @(showSignUp ? "#ADD8E6" : "white"); display: flex; align-items: center; justify-content: center;">
        @if (showSignUp)
        { 
            <div style="background-color: rgb(255, 255, 255); padding: 30px; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.08);">
                    </div>
                    <br />
                    <div>
                        <input type="email" placeholder="Email" @bind="signUpEmail" />
                    </div>
                    <br />
                    <div>
                        <input type="password" placeholder="Password" @bind="signUpPassword" />
                    </div>
                    <br />
                    <div>
                        <input type="text" placeholder="Phone" @bind="signUpPhone" />
                    </div>
                    <br />
                    <div>
                        <button @onclick="RegisterUser">Sign Up</button>
                        <button @onclick="ToggleSignUp" style="margin-left:10px;">Back to Sign In</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@inject NavigationManager NavigationManager

@code {
    private bool showSignUp = false;

    private string signUpName;
    private string signUpEmail;
    private string signUpPassword;
    private string signUpPhone;
    private string errorMessage;
    private bool signInSuccess = false;

    private void ToggleSignUp()
    {
        showSignUp = !showSignUp;
        errorMessage = "";
    }

    private void RegisterUser()
    {
        var existingUser = UserRepository.GetUserByName(signUpName);
        if (existingUser != null)
        {
            errorMessage = "Benutzername ist bereits vergeben.";
            return;
        }

        var user = new User(0, signUpName, signUpEmail, signUpPassword, signUpPhone, "Customer");
        UserRepository.AddUser(user);
        errorMessage = "";
        showSignUp = false;
    }

    private void SignIn()
    {
        var user = UserRepository.GetUserByName(signUpName);
        if (user != null && user.Password == signUpPassword)
        {
            AuthService.SetUser(user); // Benutzer merken
            signInSuccess = true;
            errorMessage = "";
        }
        else
        {
            signInSuccess = false;
            errorMessage = "Invalid username or password.";
        }
    }

    private void GoToBooklist()
    {
        NavigationManager.NavigateTo("/booklist");
    }
}
