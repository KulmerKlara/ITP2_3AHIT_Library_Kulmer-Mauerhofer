@page "/genrespage/{Genre?}"
@using Library.Data
@inject BookRepository BookRepo
@inject AuthService AuthService
@inject UserBookListRepository UserBookListRepository
@using Microsoft.AspNetCore.Components

<div style="display: flex; justify-content: center; margin-bottom: 24px;">
    <input 
        type="text" 
        placeholder="Buch suchen..." 
        @bind="searchTerm" 
        @bind:event="oninput"
        style="width: 50vw; max-width: 600px; padding: 12px 18px; font-size: 1.1rem; border-radius: 8px; border: 1px solid #bbb; box-shadow: 0 2px 8px rgba(0,0,0,0.04);"
    />
</div>

@code {
    private string searchTerm = "";

    private IEnumerable<Book> FilteredBooks =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? books
            : books?.Where(b =>
                (!string.IsNullOrEmpty(b.Title) && b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(b.Author) && b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            ) ?? Enumerable.Empty<Book>();
}

@if (books == null)
{
    <p>Lade Bücher...</p>
}
else if (books.Count == 0)
{
    <p>Keine Bücher @(string.IsNullOrEmpty(Genre) ? "" : $"im Genre \"{Genre}\" ")gefunden.</p>
}
else
{  
    <div class="book-grid">
        @foreach (var book in FilteredBooks)
        {
            <div class="book-card" @onclick="() => ShowBookDetails(book)">
                <div class="book-image-placeholder">
                    Bild kommt hier hin
                </div>
                <div class="book-title">@book.Title</div>
            </div>
        }
    </div>
}

@if (showDetails && selectedBook != null)
{
    <div class="modal-overlay" @onclick="CloseDetails">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="close-btn" @onclick="CloseDetails">×</button>

            <div class="info-field">
                <h2>@selectedBook.Title</h2>
            </div>

            <div class="info-field">
                <strong>Autor:</strong> @selectedBook.Author
            </div>

            <div class="info-field">
                <strong>Genre:</strong> @selectedBook.Genre
            </div>

            <div class="info-field">
                <strong>Zusammenfassung:</strong>
                <p>@selectedBook.Summary</p>
            </div>

            <div class="info-field">
                <strong>Verfügbar:</strong> @(selectedBook.IsAvailable ? "Ja" : "Nein")
            </div>

            <div class="modal-footer">
                <button class="add-btn" @onclick="AddToBooklist">Add to Booklist</button>
                @if (!string.IsNullOrEmpty(addToListMessage))
                {
                    <p style="color: green; margin-top:10px;">@addToListMessage</p>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? Genre { get; set; }
    private List<Book> books;

    private bool showDetails = false;
    private Book selectedBook;

    private string addToListMessage;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Genre))
        {
            books = await Task.FromResult(BookRepo.GetAllBooks());
        }
        else
        {
            books = await Task.FromResult(BookRepo.GetBooksByGenre(Genre));
        }
        addToListMessage = null;
    }

    private void ShowBookDetails(Book book)
    {
        selectedBook = book;
        showDetails = true;
        addToListMessage = null;
    }

    private void CloseDetails()
    {
        showDetails = false;
        selectedBook = null;
        addToListMessage = null;
    }

    private void AddToBooklist()
    {
        if (!AuthService.IsAuthenticated || AuthService.LoggedInUser == null)
        {
            addToListMessage = "Bitte erst anmelden, um Bücher hinzuzufügen.";
            return;
        }

        var userId = AuthService.LoggedInUser.Id;

        // Lade das Buch nochmal aus der DB, um aktuellen Status zu prüfen
        var bookFromDb = BookRepo.GetAllBooks().FirstOrDefault(b => b.BookId == selectedBook.BookId);
        if (bookFromDb == null)
        {
            addToListMessage = "Buch konnte nicht gefunden werden.";
            return;
        }

        if (!bookFromDb.IsAvailable)
        {
            addToListMessage = $"Buch '{bookFromDb.Title}' ist aktuell nicht verfügbar und kann nicht hinzugefügt werden.";
            return;
        }

        if (UserBookListRepository.IsBookAlreadyInUserList(userId, selectedBook.BookId))
        {
            addToListMessage = $"Buch '{selectedBook.Title}' ist bereits in deiner Booklist.";
            return;
        }

        var giveBackDate = DateTime.Today.AddDays(7);

        // Buch zur UserBookList mit Rückgabedatum hinzufügen
        UserBookListRepository.AddBookToUserList(userId, selectedBook.BookId, giveBackDate);

        // Buch auf nicht verfügbar setzen und Rückgabedatum vergeben
        bookFromDb.IsAvailable = false;
        bookFromDb.GiveBackDate = DateTime.Today.AddDays(7);
        bookFromDb.GiveBackDate = giveBackDate;

        // Änderungen in der DB speichern
        BookRepo.UpdateBook(bookFromDb);

        // UI aktualisieren, damit Status korrekt angezeigt wird
        selectedBook.IsAvailable = false;
        selectedBook.GiveBackDate = bookFromDb.GiveBackDate;
        selectedBook.GiveBackDate = giveBackDate;

        addToListMessage = $"Buch '{selectedBook.Title}' wurde zur Booklist hinzugefügt. Rückgabe bis: {selectedBook.GiveBackDate?.ToString("dd.MM.yyyy")}";
        addToListMessage = $"Buch '{selectedBook.Title}' wurde zur Booklist hinzugefügt. Rückgabe bis: {giveBackDate:dd.MM.yyyy}";
    }
}

<style>
.book-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-top: 20px;
    justify-content: flex-start;
}

/* Große Karte mit hellgrauem Hintergrund (leicht dunkler als weiß) */
.book-card {
    width: 250px;
    background-color: #f0f0f0; /* etwas dunkler als weiß */
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    transition: transform 0.2s ease, box-shadow 0.3s ease;
    cursor: pointer;
}

/* Hover-Effekt bleibt */
.book-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);
}

/* Graues Feld für Bild mit abgerundeten Kanten */
.book-image-placeholder {
    width: 100%;
    height: 300px;
    background-color: #cccccc; /* graues Feld */
    border-radius: 12px; /* abgerundete Ecken */
    display: flex;
    align-items: center;
    justify-content: center;
    color: #444;
    font-size: 16px;
    margin-bottom: 12px;
    text-align: center;
}

/* Titel im großen hellgrauen Feld */
.book-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: #333;
    text-align: center;
}

/* Modal Overlay */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0,0,0,0.4);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

/* Modal Content ca. halb so breit wie die Seite, max 600px, etwas höher */
.modal-content {
    background-color: white;
    border-radius: 12px;
    padding: 24px 32px;
    width: 50vw;
    max-width: 600px;
    max-height: 90vh; /* höher als vorher */
    overflow-y: auto;
    box-shadow: 0 8px 24px rgba(0,0,0,0.3);
    position: relative;
    display: flex;
    flex-direction: column;
}

/* Close Button oben rechts */
.close-btn {
    position: absolute;
    top: 12px;
    right: 16px;
    border: none;
    background: none;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    color: #666;
}

.close-btn:hover {
    color: #000;
}

/* Einzelne Info-Felder im Modal */
.info-field {
    background-color: #f5f5f5; /* hellgrau */
    border-radius: 10px;
    padding: 12px 16px;
    margin-bottom: 16px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    color: #333;
}

.info-field h2 {
    margin: 0;
}

/* Footer Bereich für den Button */
.modal-footer {
    margin-top: auto; /* schiebt den Footer nach unten */
    padding-top: 12px;
    border-top: 1px solid #ddd;
    display: flex;
    justify-content: center;
}

/* Stil für den Add to Booklist Button */
.add-btn {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 24px;
    font-size: 1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.add-btn:hover {
    background-color: #0056b3;
}
</style>